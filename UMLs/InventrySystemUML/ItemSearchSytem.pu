@startuml InventrySystem

class InventrySystemManeger<THolder>{
    ~ {field} THolder _holder {get;}
    + {field} ISearcher Searcher {get;}
    + {field} ITaker Taker{get;}
    + {field} IRegister Register{get;}
    + {method} void Update()
}

interface ISearchable{
    + {method} OnSearch()
}

interface ITakable{
    + {method} OnTaken()
}

interface IRegistable{
    + {field} int MaxRegistable{get;}

    + {method} OnRegisterd()
}

abstract class ISearcher<THolder>{
    # {field} InventrySystemManeger<THolder> _maneger
    + {method} void Execute< TEnumerable<GameObject>>(out TEnumerable<GameObject> searchResults);
    # {method} abstract void SearchInGameWorld()
}

abstract class ITaker<THolder>{
    # {field} InventrySystemManeger<THolder> _maneger
    # {field} Stack<ITakable> _currentTakables
    ~ {method} void AddTakable(GameObject gameObject)
    ~ {method} void ClearTakables()
    + {method} void Execute()
    ~ {method} virtual GameObject Take(){_currentTakables.Pop()}
    ~ {method} abstract void AfterRegist(GameObject gameObject)
}

abstract class Register<THolder>{
    # {field} InventrySystemManeger<THolder> _maneger
    # {field} Dictionary<IRegistable, int> _itemInventry
    + {method} abstract bool TryRegist(IRegistable registable)
    + {method} void Consume(IRegistable registable)
    + {method} void Consume(IRegistable registable, int consumption)
    + {method} int GetRegisteredCounts(IRegistable, registable)
    + {method} IRegistable GetRegistable(int index)
}

class TakerViewPresenter
class InventryViewPresenter
ITaker --> ITakable
ISearcher --> ISearchable
Register --> IRegistable
InventrySystemManeger --> ISearcher
InventrySystemManeger --> ITaker
InventrySystemManeger --> Register
@enduml

